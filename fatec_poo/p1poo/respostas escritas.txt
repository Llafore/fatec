3. A programação orientada a objetos é baseada na organização e manipulação de objetos que podem conter dados na forma de campos (atributos) e códigos na forma de procedimentos (métodos). Caracterizado pela abstração de objetos do mundo real, para criação de classes, herança entre classes (facilitando a manutenção de um código) e seu polimorfismo (objetos de diferentes classes possam ser tratados de forma uniforme, possibilitando a implementação de múltiplas interfaces para um mesmo método), torando-se por esses motivos, um código mais rápido de ser desenvolvido. Suas desvantagem é a complexidade no aprendizado e execução.

4. A herança é a utilização de uma classe já existente, para a criação de uma nova classe, herdando seus atributos e métodos, enquanto a interface, provém apenas a estrutura de métodos (a chamada deles), os obrigando a serem implementados nas classes que forem implementados. A interface, apresenta uma característica exclusiva, em relação à herança: uma classe pode chamar mais de uma interface.
A herança pode ser usada quando houver uma relação clara de "é um" entre as classes e você quiser reutilizar o comportamento de uma classe existente em outra classe.
A implementação de interfaces pode ser usada quando você quiser garantir que diferentes classes possam fornecer uma funcionalidade comum, independentemente de sua hierarquia de herança. Isso é particularmente útil quando você precisa que classes não relacionadas forneçam o mesmo comportamento ou quando você quer alcançar uma abstração mais flexível.